{namespace OpenId.Templates}

/**
 * @param loginUrl
 * @param content content
 */
{template .errorWrapper}
{call aui.page.document}
    {param windowTitle: 'OpenID Failed'/}
    {param headContent}
        <meta name="decorator" content="atl.general"/>
        <parameter name="show-main-container" value="false"/>
        <parameter name="bodyClass" value="openid error aui-page-focused"/>
    {/param}
    {param extraClasses: 'openid error'/}
    {param pageType: 'focused'/}
    {param content}
        {call aui.page.pageHeader}
            {param id}main-header{/param}
            {param content}
                {call aui.page.pageHeaderMain}
                    {param content}
                        <div id="title-heading" class="pagetitle">
                            <h1 id="title-text">
                                OpenID Failed
                            </h1>
                        </div>
                    {/param}
                {/call}
            {/param}
        {/call}
        {call aui.page.pagePanel}
            {param content}
                {call aui.page.pagePanelContent}
                    {param content}
                        <div class="error-message">
                            {$content|noAutoescape}
                        </div>
                        {call aui.buttons.buttons}
                            {param content}
                                {call aui.buttons.button}
                                    {param text: 'Log In'/}
                                    {param type: 'link'/}
                                    {param tagName: 'a'/}
                                    {param extraAttributes}
                                    href="{$loginUrl}"
                                    {/param}
                                {/call}
                            {/param}
                        {/call}
                    {/param}
                {/call}
            {/param}
        {/call}
    {/param}
{/call}
{/template}

/**
 * @param loginUrl
 * @param? sslError in case it's SSL mis-configuration
 */
{template .error}
{call .errorWrapper}
    {param content}

        There was a problem during authentication.&nbsp;

        {if $sslError}
            SSL connection failed. Please refer to logs for details and <a href="https://confluence.atlassian.com/display/JIRA/Connecting+to+SSL+services">check    how to set up SSL connections</a>.
        {else}
            Please refer to logs for an additional info.
        {/if}

    {/param}
    {param loginUrl: $loginUrl/}
{/call}
{/template}

/**
 * @param loginUrl
 * @param providerName name of the provider
 */
{template .invalidState}
{call .errorWrapper}
    {param content}
        Response from {$providerName} didn't match the state saved in the session. Either JIRA server was restarted or your session was renewed.
    {/param}
    {param loginUrl: $loginUrl/}
{/call}
{/template}

/**
 * @param loginUrl
 * @param providerName name of the provider
 * @param errorMessage error message
 */
{template .oauthError}
{call .errorWrapper}
    {param content}
        {$providerName} returned '{$errorMessage}' which suggests an invalid configuration, please check if Client ID and Client Secret match with those offered by {$providerName}.
    {/param}
    {param loginUrl: $loginUrl/}
{/call}
{/template}

/**
 * @param loginUrl
 */
{template .emptyEmail}
{call .errorWrapper}
    {param content}
    OpenID provider did not return a valid email address for the identity. Cannot proceed. Please try again using different method.
    {/param}
    {param loginUrl: $loginUrl/}
{/call}
{/template}

/**
 * @param loginUrl
 */
{template .domainMismatch}
{call .errorWrapper}
    {param content}
    Your email address is not on a list of allowed domains. Please use a different account to log in.
    {/param}
    {param loginUrl: $loginUrl/}
{/call}
{/template}

/**
 * @param loginUrl
 */
{template .noUserMatched}
{call .errorWrapper}
    {param content}
    No existing user was matched. Cannot proceed. Please try again using different method.
    {/param}
    {param loginUrl: $loginUrl/}
{/call}
{/template}

/**
 * @param loginUrl
 */
{template .invalidLicense}
{call .errorWrapper}
    {param content}
    No valid license found. Please ask your administrator to configure the plugin.
    {/param}
    {param loginUrl: $loginUrl/}
{/call}
{/template}