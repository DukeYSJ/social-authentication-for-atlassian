{namespace OpenId.Templates}

/**
 * @param? value
 */
{template .allowedDomainsTextField}
{call aui.form.textField}
    {param id: 'allowedDomains'/}
    {param labelContent: 'Allowed Domains'/}
    {param descriptionText: 'Limit access to users having emails from given domains.'/}
    {param value: $value/}
{/call}

{/template}

/**
 * @param forField
 * @param message
 * @param? extraClasses
 */
{template .fieldError}
    <div data-field="{$forField}" class="error{call aui.renderExtraClasses data="all" /}">{$message}</div>
{/template}

/**
 * @param? errors
 * @param? values
 * @param presets
 * @param callbackId
 * @param callbackUrl
 */
{template .providerDetails}
{call aui.form.fieldGroup}
    {param content}
        {call aui.form.label}
            {param forField: 'name'/}
            {param isRequired: true/}
            {param content: 'Name'/}
        {/call}
        {call aui.form.input}
            {param id: 'name'/}
            {param type:'text'/}
            {param value: $values.name/}
        {/call}
        {if $errors.name}
            {call .fieldError}
                {param forField: 'name'/}
                {param message: $errors.name/}
            {/call}
        {/if}
    {/param}
{/call}
<fieldset class="group">
    <legend>Use preset for</legend>
    <div class="presets">
        <ul class="operations-list">
            {foreach $preset in $presets}
                <li>
                    <a class="preset"
                    {foreach $k in keys($preset)}
                        data-{$k}="{$preset[$k]}"
                    {/foreach}
                    >{$preset.name}</a></li>
            {/foreach}
        </ul>
    </div>
</fieldset>
{call aui.form.fieldGroup}
    {param content}
        {call aui.form.label}
            {param forField: 'endpointUrl'/}
            {param isRequired: true/}
            {param content: 'Provider URL'/}
        {/call}
        {call aui.form.input}
            {param id: 'endpointUrl'/}
            {param type:'text'/}
            {param width: ''/}
            {param value: $values.endpointUrl/}
        {/call}
        {if $errors.endpointUrl}
            {call .fieldError}
                {param forField: 'endpointUrl'/}
                {param message: $errors.endpointUrl/}
            {/call}
        {/if}
        {call aui.message.info}
            {param extraClasses: 'hint hidden'/}
            {param content}
                <span class="hint-text"></span>
            {/param}
        {/call}
    {/param}
{/call}
<fieldset class="group">
    <legend><span>Provider Type</span></legend>
    <div class="radio">
        <input id="openid1" class="radio" type="radio" name="providerType" value="openid1" {if not $values.providerType or $values.providerType == 'openid1'}checked="true"{/if}>
        <label for="openid1">OpenID 1.0</label>
    </div>
    <div class="radio">
        <input id="oauth2" class="radio" type="radio" name="providerType" value="oauth2" {if $values.providerType == 'oauth2'}checked="true"{/if}>
        <label for="oauth2">OpenID Connect/OAuth 2.0</label>
    </div>
</fieldset>
{call aui.form.fieldGroup}
    {param extraClasses}openid1{/param}
    {param content}
        {call aui.form.label}
            {param isRequired: true/}
            {param forField: 'extensionNamespace'/}
            {param content: 'Alias'/}
        {/call}
        {call aui.form.input}
            {param id: 'extensionNamespace'/}
            {param type:'text'/}
            {param value: $values.extensionNamespace/}
        {/call}
        {call aui.form.fieldDescription}
            {param message}Probably you should use 'ext1'{/param}
        {/call}
        {if $errors.extensionNamespace}
            {call .fieldError}
                {param forField: 'extensionNamespace'/}
                {param message: $errors.extensionNamespace/}
            {/call}
        {/if}
    {/param}
{/call}
{call aui.form.fieldGroup}
    {param extraClasses}oauth2{/param}
    {param content}
        {call aui.form.label}
            {param forField: 'callbackUrl'/}
            {param content: 'Callback URL'/}
        {/call}
        <input type="hidden" name="callbackId" value="{$callbackId}">
        <span id="callbackUrl">{$callbackUrl}</span>
        {call aui.form.fieldDescription}
            {param message}You need to submit it to your authentication provider.{/param}
        {/call}
    {/param}
{/call}
{call aui.form.fieldGroup}
    {param extraClasses}oauth2{/param}
    {param content}
        {call aui.form.label}
            {param forField: 'clientId'/}
            {param content: 'Client ID'/}
            {param isRequired: true/}
        {/call}
        {call aui.form.input}
            {param id: 'clientId'/}
            {param type:'text'/}
            {param value: $values.clientId/}
        {/call}
        {call aui.form.fieldDescription}
            {param message}Client ID that was established at the provider's site{/param}
        {/call}
        {if $errors.clientId}
            {call .fieldError}
                {param forField: 'clientId'/}
                {param message: $errors.clientId/}
            {/call}
        {/if}
    {/param}
{/call}
{call aui.form.fieldGroup}
    {param extraClasses}oauth2{/param}
    {param content}
        {call aui.form.label}
            {param forField: 'clientSecret'/}
            {param content: 'Client Secret'/}
            {param isRequired: true/}
        {/call}
        {call aui.form.input}
            {param id: 'clientSecret'/}
            {param type:'text'/}
            {param value: $values.clientSecret/}
        {/call}
        {call aui.form.fieldDescription}
            {param message}Client Secret that was established at the provider's site{/param}
        {/call}
        {if $errors.clientSecret}
            {call .fieldError}
                {param forField: 'clientSecret'/}
                {param message: $errors.clientSecret/}
            {/call}
        {/if}
    {/param}
{/call}
{call .allowedDomainsTextField}
    {param value: $values.allowedDomains/}
{/call}
{/template}

/**
 * @param currentUrl
 * @param? errors
 * @param? values
 * @param presets
 * @param callbackId
 * @param callbackUrl
 */
{template .addProvider}
{call aui.page.document}
    {param windowTitle: 'Add Authentication Provider'/}
    {param headContent}
        <meta name="decorator" content="admin"/>
        <meta name="admin.active.section" content="users_groups_configuration/embedded_crowd_section"/>
        <meta name="admin.active.tab" content="openid"/>
    {/param}
    {param content}
        <div class="openid">
        	{call aui.page.pageHeader}
				{param content}
					{call aui.page.pageHeaderMain}
						{param content}
							<h2>Add Authentication Provider</h2>
							<p class="description">You can add any OpenID/OAuth 2.0 provider that returns e-mail and full name of the user.</p>
						{/param}
					{/call}
				{/param}
			{/call}
            {call aui.form.form}
                {param action: ''/}
                {param id: 'addProvider'/}
                {param content}
                    {call aui.form.fieldset}
                        {param legendContent: 'Add Provider'/}
                        {param content}
							{call .providerDetails}
								{param errors: $errors/}
								{param values: $values/}
							    {param presets: $presets/}
							    {param callbackId: $callbackId/}
							    {param callbackUrl: $callbackUrl/}
							{/call}
                        {/param}
                    {/call}

                    {call aui.form.buttons}
                        {param content}
                            {call aui.form.submit}
                                {param text: 'Add Provider'/}
                                {param id: 'saveProvider'/}
                            {/call}
                            {call aui.form.linkButton}
                                {param text: 'Cancel'/}
                                {param id: 'cancel'/}
                                {param url}{$currentUrl}{/param}
                            {/call}
                        {/param}
                    {/call}
                {/param}
            {/call}
        </div>
    {/param}
{/call}
{/template}

/**
 * @param currentUrl
 * @param pid
 * @param name
 */
{template .deleteProvider}
{call aui.page.document}
    {param windowTitle}Delete OpenID: {$name}{/param}
    {param headContent}
        <meta name="decorator" content="admin"/>
    {/param}
    {param content}
        <div class="openid">
        	{call aui.page.pageHeader}
				{param content}
					{call aui.page.pageHeaderMain}
						{param content}
							<h2>Delete OpenID: {$name}</h2>
						{/param}
					{/call}
				{/param}
			{/call}

			{call aui.form.form}
				{param action}{$currentUrl}?op=delete&pid={$pid}&confirm{/param}
				{param isTopLabels: true/}
				{param content}
					{call aui.message.warning}
						{param content}
							You are about to delete provider '{$name}'. This action cannot be undone.
						{/param}
					{/call}

					{call aui.form.buttons}
						{param alignment: 'form-footer'/}
						{param content}
							{call aui.form.submit}
								{param text: 'Delete'/}
								{param id: 'delete'/}
							{/call}
							{call aui.form.linkButton}
								{param text: 'Cancel'/}
								{param id: 'cancel'/}
								{param url}{$currentUrl}{/param}
							{/call}
						{/param}
					{/call}
				{/param}
			{/call}
        </div>
    {/param}
{/call}
{/template}

/**
 * @param currentUrl
 * @param? errors
 * @param? values
 * @param presets
 * @param callbackId
 * @param callbackUrl
 */
{template .editProvider}
{call aui.page.document}
    {param windowTitle: 'Edit Authentication Provider'/}
    {param headContent}
        <meta name="decorator" content="admin"/>
        <meta name="admin.active.section" content="users_groups_configuration/embedded_crowd_section"/>
        <meta name="admin.active.tab" content="openid"/>
    {/param}
    {param content}
        <div class="openid">
        	{call aui.page.pageHeader}
				{param content}
					{call aui.page.pageHeaderMain}
						{param content}
							<h2>Edit Authentication Provider</h2>
						{/param}
					{/call}
				{/param}
			{/call}
            {call aui.form.form}
                {param action: ''/}
                {param id: 'editProvider'/}
                {param content}
                    {call aui.form.fieldset}
                        {param legendContent: 'Edit Provider'/}
                        {param content}
							{call .providerDetails}
								{param errors: $errors/}
								{param values: $values/}
								{param presets: $presets/}
								{param callbackId: $callbackId/}
								{param callbackUrl: $callbackUrl/}
							{/call}
                        {/param}
                    {/call}

                    {call aui.form.buttons}
                        {param content}
                            {call aui.form.submit}
                                {param text: 'Edit Provider'/}
                                {param id: 'saveProvider'/}
                            {/call}
                            {call aui.form.linkButton}
                                {param text: 'Cancel'/}
                                {param id: 'cancel'/}
                                {param url}{$currentUrl}{/param}
                            {/call}
                        {/param}
                    {/call}
                {/param}
            {/call}
        </div>
    {/param}
{/call}
{/template}

/**
 */
{template .advancedProviders}
<div ng-app="openid.configuration" ng-controller="ConfigurationCtrl">
    <span ng-if="!loaded" class="icon loading"></span>
    {call aui.message.error}
        {param extraAttributes}ng-if="error"{/param}
        {param content}There was an error loading providers, please try again or contact the administrator.{/param}
    {/call}
    {call aui.table}
        {param extraAttributes}
            ng-if="loaded"
        {/param}
        {param contentIncludesTbody: true/}
        {param theadContent}
            <th>Name</th>
            <th>Allowed Domains</th>
            <th>Order</th>
            <th>Operations</th>
        {/param}
        {param content}
            <tbody>
                <tr ng-repeat="provider in providers" ng-class='{lb}disabled: !provider.enabled{rb}'>
                    <td>[[provider.name]]</td>
                    <td>
                        <span ng-show="provider.allowedDomains">[[provider.allowedDomains]]</span>
                        <span ng-show="!provider.allowedDomains">All</span>
                    </td>
                    <td>
                        <span ng-if="$first" class="icon icon-move-up-disabled">Move Up</span>
                        <a ng-if="!$first" href="" ng-click="moveProviderUp(provider.id)"><span class="icon icon-move-up">Move Up</span></a>

                        <span ng-if="$last" class="icon icon-move-down-disabled">Move Down</span>
                        <a ng-if="!$last" href="" ng-click="moveProviderDown(provider.id)"><span class="icon icon-move-down">Move Down</span></a>
                    </td>
                    <td data-cell-type="operations" data-provider-name="[[provider.name]]" data-provider-id="[[provider.id]]">
                        <ul class="operations-list">
                            <li ng-if="provider.enabled">
                                <a class="disable" href="?op=disable&pid=[[provider.id]]">Disable</a>
                            </li>
                            <li ng-if="provider.enabled == false">
                                <a class="enable" href="?op=enable&pid=[[provider.id]]">Enable</a>
                            </li>
                            <li>
                                <a class="edit" href="?op=edit&pid=[[provider.id]]">Edit</a>
                            </li>
                            <li>
                                <a class="delete" id="delete_[[provider.id]]" href="?op=delete&pid=[[provider.id]]">Delete</a>
                            </li>
                        </ul>
                    </td>
                </tr>
            </tbody>
            <tfoot ng-hide="providers.length">
                <tr>
                    <td colspan="100"><div style="text-align: center">You don't have any OpenID providers configured yet.</div></td>
                </tr>
            </tfoot>
        {/param}
    {/call}
</div>
{/template}

/**
 * @param currentUrl current URL
 * @param isExternal
 * @param isPublic
 * @param isCreatingUsers
 */
{template .providers}
{call aui.page.document}
    {param windowTitle: getText('openid.authentication.providers')/}
    {param extraClasses: 'openid list-providers'/}
    {param headContent}
        <meta name="decorator" content="admin"/>
        <meta name="admin.active.section" content="users_groups_configuration/embedded_crowd_section"/>
        <meta name="admin.active.tab" content="openid"/>
    {/param}
    {param content}
        {call aui.page.pageHeader}
            {param content}
                {call aui.page.pageHeaderMain}
                    {param content}
                        <h2>{getText('openid.authentication.providers')}</h2>
                        <p class="description">The table below shows the authentication providers currently configured in JIRA.</p>
                    {/param}
                {/call}
                {call aui.page.pageHeaderActions}
                    {param content}
                        {call aui.buttons.button}
                            {param id: 'addProvider'/}
                            {param text}Add Provider{/param}
                            {param tagName: 'a'/}
                            {param extraAttributes}href="{$currentUrl}?op=add"{/param}
                        {/call}
                    {/param}
                {/call}
            {/param}
        {/call}

        {call .advancedProviders}
            {param currentUrl: $currentUrl/}
        {/call}

        <h3>
            Automatically Create Users
            &nbsp;
            {if $isCreatingUsers}
                <span id="creatingUsersState" class="aui-lozenge aui-lozenge-success">Enabled</span>
            {else}
                <span id="creatingUsersState" class="aui-lozenge aui-lozenge-error">Disabled</span>
            {/if}
        </h3>

        {if not $isPublic}
            {if not $isCreatingUsers}
                <p>JIRA Public Mode is disabled, only already existing users will be able to log in using OpenID authentication.</p>
                <p>Users will be matched by e-mail only.</p>
                <p>Should users be automatically created when using OpenID authentication?
                <a id="switchCreatingUsers" data-disable="false" href="{$currentUrl}?op=createUsers">Click here to allow the plugin to create users.</a></p>
            {else}
                <p>JIRA Public Mode is disabled, but the plugin will create new users.</p>
                <p>Users will be matched by e-mail only. Missing users will be automatically added.</p>
                <p>Should only existing users be allowed when using OpenID authentication?
                <a id="switchCreatingUsers" data-disable="true" href="{$currentUrl}?op=onlyAuthenticate">Click here to disallow the plugin to create new users.</a></p>
            {/if}
        {elseif $isExternal}
            <p>External User Management is enabled, only already existing users will be able to log in using OpenID authentication.</p>
            <p>Users will be matched by e-mail only.</p>
        {else}
            <p>JIRA Public Mode is enabled, OpenID authentication will match existing users by e-mail or create new users.</p>
            <p>Each enabled Provider needs to return e-mail and full name at least.</p>
        {/if}
    {/param}
{/call}
{/template}

/**
 * @param baseUrl base URL
 * @param content content
 */
{template .errorWrapper}
{call aui.page.document}
    {param windowTitle: 'OpenID Failed'/}
    {param headContent}
        <meta name="decorator" content="general"/>
    {/param}
    {param extraClasses: 'openid error'/}
    {param pageType: 'focused'/}
    {param content}
        {call aui.page.pagePanel}
            {param content}
                {call aui.page.pagePanelContent}
                    {param content}
                        <h2>OpenID Failed</h2>
                        <div class="error-message">
                            {$content|noAutoescape}
                        </div>
                        {call aui.buttons.buttons}
                            {param content}
                                {call aui.buttons.button}
                                    {param text: 'Log In'/}
                                    {param type: 'link'/}
                                    {param tagName: 'a'/}
                                    {param extraAttributes}
                                    href="{$baseUrl}/login.jsp"
                                    {/param}
                                {/call}
                            {/param}
                        {/call}
                    {/param}
                {/call}
            {/param}
        {/call}
    {/param}
{/call}
{/template}

/**
 * @param baseUrl base URL
 * @param? sslError in case it's SSL mis-configuration
 */
{template .error}
{call .errorWrapper}
    {param content}

        There was a problem during authentication.&nbsp;

        {if $sslError}
            SSL connection failed. Please refer to logs for details and <a href="https://confluence.atlassian.com/display/JIRA/Connecting+to+SSL+services">check    how to set up SSL connections</a>.
        {else}
            Please <a href="https://accounts.google.com/Logout" target="_blank">log out from Google</a> and try again.
        {/if}

    {/param}
    {param baseUrl: $baseUrl/}
{/call}
{/template}

/**
 * @param baseUrl base URL
 */
{template .emptyEmail}
{call .errorWrapper}
    {param content}
    OpenID provider did not return a valid email address for the identity. Cannot proceed. Please try again using different method.
    {/param}
    {param baseUrl: $baseUrl/}
{/call}
{/template}

/**
 * @param baseUrl base URL
 */
{template .domainMismatch}
{call .errorWrapper}
    {param content}
    Your email address is not on a list of allowed domains. Please <a href="https://accounts.google.com/Logout" target="_blank">log out from Google</a> and try again.
    {/param}
    {param baseUrl: $baseUrl/}
{/call}
{/template}

/**
 * @param baseUrl base URL
 */
{template .noUserMatched}
{call .errorWrapper}
    {param content}
    No existing user was matched. Cannot proceed. Please try again using different method.
    {/param}
    {param baseUrl: $baseUrl/}
{/call}
{/template}

/**
 * @param baseUrl base URL
 */
{template .invalidLicense}
{call .errorWrapper}
    {param content}
    No valid license found. Please ask your administrator to configure the plugin.
    {/param}
    {param baseUrl: $baseUrl/}
{/call}
{/template}